// // ## Example 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º

// // 1. –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ `genres` —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
// // 2. –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
// // 3. –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// // 4. –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞
// //    –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
// // 5. –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// // 6. –í—Å—Ç–∞–≤—å—Ç–µ ¬´Country¬ª –∏ ¬´Reggy¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.

// const genres = ['Jazz', 'Blues'];
// genres.push('–†–æ–∫-–Ω-—Ä–æ–ª–ª');
// console.log(genres);

// console.log(genres[0]);

// console.log(genres[genres.length - 1]);

// const genresDel = genres.splice(0, 1);
// console.log(genres);
// console.log(genresDel);

// genres.splice(0, 0, 'Country', 'Reggy');
// console.log(genres);

// ==================================================

// // ## Example 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è
// // –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `values` –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ
// // —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// const values = '20 30';
// const number = values.split(' ');
// const result = number[0] * number[1];
// // const result = Number(number[0]) + Number(number[1]);  =50, –Ω–µ –ø–æ–Ω—è–ª–∞ –æ–± –æ–≥–ª–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
// console.log(result);

// ====================================================

//  ## Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ `fruits` —Ü–∏–∫–ª–æ–º `for`. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
// // –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞`.
// // –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `1`.

// // ```js
// const fruits = ["üçé", "üçá", "üçë", "üçå", "üçã"];

// for (let i = 0; i < fruits.length; i += 1) {
//     const index = i + 1;
//     const element = fruits[i];
//     console.log(`${index} : ${element}`);
// }

// ===================================================
// // ## Example 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í
// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö `names` –∏ `phones` —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤,
// —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞
// —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.

// // –û–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∫–æ–ª–∏ –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç—Ä–æ–∫ —Ä—ñ–∑–Ω–∞

// const names = 'lena,tanya,masha,nata';
// const phones = '380888,34444,558486,53566';

// const namesNumber = names.split(',');
// const phonesNumber = phones.split(',');

// console.log(namesArray);
// console.log(phonesArray);

// // let longestArray = [];

// // if (namesArray.length > phonesArray.length) {
// //   longestArray = namesArray;
// // } else {
// //   longestArray = phonesArray;
// // }

// const longestArray = namesArray.length > phonesArray.length ? namesArray : phonesArray;

// for (let i = 0; i < longestArray.length; i += 1) {
//   const name = namesArray[i] === undefined ? "empty" : namesArray[i];
// //   iteration #1
//   i = 0
//   const name = namesArray[0]
//   const name = 'Jacob' === undefined // false
//   const name = namesArray[0] // Jacob;
//     //   // Iteration #4
// //   // i = 3
// //   // const name = namesArray[3]
// //   // const name = undefined === undefined // true
// //   //   const name = 'empty'
// //   const phone = phonesArray[i] === undefined ? "empty" : phonesArray[i];
// //   console.log(`${name} - ${phone}`);
// }??????????????????//

// ===============================================================

// // ## Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏
// // –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è
// // –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.

// const string = '–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏';
// const stringArrys = string.split(' ');
// console.log(stringArrys);

// // stringArrys.shift();
// // stringArrys.pop();
// // console.log(stringArrys);
//     //  ||
// // const copyArrys = stringArrys.slice(1, stringArrys.length - 1);
// // console.log(copyArrys);

// //      ||

// // const copyArrys = stringArrys.slice();      /* 1–π —Å–ø–æ—Å–æ–± —Å—Ç–æ—Ä–∫—É –≤ –º–∞—Å—Å–∏–≤ */
// const copyArrays = [].concat(stringArrys);     /* 2–π —Å–ø–æ—Å–æ–± —Å—Ç–æ—Ä–∫—É –≤ –º–∞—Å—Å–∏–≤ */
// copyArrays.splice(0, 1);       /*  —É–¥–∞–ª–∏—Ç—å 1–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ*/
// copyArrays.splice(copyArrays.length - 1, 1);     /* —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ */
// const result = copyArrays.join(" ");     /* –º–∞—Å—Å–∏–≤ —Å–æ–µ–¥–µ–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É */
// console.log("original", stringArrys);     /* –æ—Ä—Ä–∏–≥–∏–Ω–∞–ª –º–∞—Å—Å–∏–≤–∞ */
// console.log("copy", copyArrays);     /* –∫–æ–ø–∏—è –±–µ–∑ –ø–µ—Ä–≤–∞–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ */
// console.log(result);     /* —Å—Ç—Ä–æ–∫–∞ –∫–æ–ø–∏–∏ */

// ======================================================

//  // Example 6 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) –∏ –≤—ã–≤–æ–¥–∏—Ç
// // –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å. /*   */

// const string = '–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É';
// const Arraystring = string.split(' ');
// console.log("string :", string);
// console.log("array :", Arraystring);

// var rev = [...Arraystring].reverse();   /*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–≤–µ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ reverse() –º–µ—Ç–æ–¥ */
// console.log("revers :",rev);

/* –µ—Å–ª–∏ –º–∞—Å–∏–≤ –¥–µ–ª–∞–µ—Ç –Ω–µ –ø–æ —Å–ª–æ–≤–∞–º –∞ –ø–æ –±—É–∫–≤–∞–º –ø—Ä–æ–±–µ–ª —É–±—Ä–∞—Ç—å –≤ —Å–ø–ª–∏—Ç—É  */

// ====================================================

// // ## Example 7 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å —Ü–∏–∫–ª–æ–º

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
// // —ç–ª–µ–º–µ–Ω—Ç–∞.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// console.log('–∏—Å—Ö–æ–¥–Ω–∏–π –º–∞—Å—Å–∏–≤', langs);
// langs.sort();      /* –ú–µ—Ç–æ–¥ sort() –Ω–∞ –º–µ—Å—Ç–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤  */
// console.log('—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É', langs);

// ===================================================

// // ## Example 8 - –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è
// // –ª—é–±–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

// const numbers = [20, 17, 94, 10, 23, 3];
// const min = Math.min(...numbers);

// let min = numbers[0];
// for (let i = 1; i < numbers.length; i += 1) {
// //    if (min < numbers[i]) {
    // min = numbers[i];
// //    
// //     }
//    
//     
// }
      

// console.log(min); // 1